import math
import time
# from sympy import nextprime
from decimal import *
# Garrick Larson, Spring 2018
getcontext().prec = 1250 # precision of square root function. lower precision = higher speed, higher precision = higher prime factors

# 1200 digits
factor
factor

# factor1 = 191
# factor2 = 103
# factor1 = 86028157
# factor2 = 90713509

sprime = Decimal((factor1*factor2))
getcontext().prec = math.ceil(Decimal(sprime).log10()*Decimal(1.1)) # precision of square root function. lower precision = higher speed, higher precision = higher prime factors

start_time = time.time()

print()
print('Factor 1: ')
print(factor1)
print()
print('Factor 2: ')
print(factor2)
print()
print('Composite Semiprime: ')
print(sprime)
print()

sq = math.ceil(Decimal(sprime).sqrt())
remainder_orig = sq**2 - sprime
sq2 = sq*2 + 1
remainder = remainder_orig
# print(sq2)
# print(remainder)
count = 1

r = Decimal(remainder).sqrt()
while r != (r//1):
    remainder += sq2
    sq2 += 2
    count += 1
    if count % 1000 == 0:
        print(count)
    r = Decimal(remainder).sqrt()

# print("remainder: " + str(remainder) + "\n")
# print("r: " + str(r) + "\n")
# print("sq2: " + str(sq2) + "\n")



difference = r
factor1_output = Decimal(sprime+difference**2).sqrt() + difference
factor2_output = Decimal(sprime+difference**2).sqrt() - difference

print()
print("Factor 1 Output:")
print(factor1_output)
print()
print("Factor 2 Output:")
print(factor2_output)
print()
print("Composite: ")
print(factor1_output*factor2_output)
print()
print("count: " + str(count) + "\n")

print("--- %s seconds to run   ---" % (time.time() - start_time))
